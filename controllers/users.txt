const express = require('express');
const User = require('../models/user');

function create(req, res, next) {
    const name = req.body.name;
    const lastName = req.body.lastName;
    const email = req.body.email;
    const birthDate = req.body.birthDate;
    const CURP = req.body.CURP;
    const RFC = req.body.RFC;
    const address = req.body.address;
    const skills = req.body.skills;
    const role = req.body.role;

    const user = new User({ 
        _name: name, 
        _lastName: lastName, 
        _email: email, 
        _birthDate: birthDate, 
        _CURP: CURP, 
        _RFC: RFC, 
        _address: address, 
        _skills: skills, 
        _role: role 
    });

    user.save()
        .then(obj => res.status(200).json({
            msg: res.__("createUser.ok"),
            obj: obj
        }))
        .catch(ex => res.status(500).json({
            msg: res.__("createUser.fail"),
            obj: ex
        }));
}

function list(req, res, next) {
    let page = req.params.page ? req.params.page : 1;
    const options = { 
        page, 
        limit: 5 
    };

    User.paginate({}, options)
        .then(objs => res.status(200).json({
            msg: res.__("enlistUsers.ok"),
            obj: objs
        }))
        .catch(ex => res.status(500).json({
            msg: res.__("enlistUsers.fail"),
            obj: ex
        }));
}

function index(req, res, next) {
    const id = req.params.id;
    User.findOne({ '_id': id })
        .then(obj => res.status(200).json({
            msg: res.__("getUser.ok"),
            obj: obj
        }))
        .catch(ex => res.status(500).json({
            msg: res.__("getUser.fail"),
            obj: ex
        }));
}

function replace(req, res, next) {
    const id = req.params.id;
    const name = req.body.name || "";
    const lastName = req.body.lastName || "";
    const email = req.body.email || "";
    const birthDate = req.body.birthDate || "";
    const CURP = req.body.CURP || "";
    const RFC = req.body.RFC || "";
    const address = req.body.address || {};
    const skills = req.body.skills || [];
    const role = req.body.role || "";

    const user = {
        _name: name,
        _lastName: lastName,
        _email: email,
        _birthDate: birthDate,
        _CURP: CURP,
        _RFC: RFC,
        _address: address,
        _skills: skills,
        _role: role
    };

    User.findOneAndUpdate({ "_id": id }, user)
        .then(obj => res.status(200).json({
            msg: res.__("replaceUser.ok"),
            obj: obj
        }))
        .catch(ex => res.status(500).json({
            msg: res.__("replaceUser.fail"),
            obj: ex
        }));
}

function update(req, res, next) {
    const id = req.params.id;
    const name = req.body.name;
    const lastName = req.body.lastName;
    const email = req.body.email;
    const birthDate = req.body.birthDate;
    const CURP = req.body.CURP;
    const RFC = req.body.RFC;
    const address = req.body.address;
    const skills = req.body.skills;
    const role = req.body.role;

    const user = {};
    if (name) user._name = name;
    if (lastName) user._lastName = lastName;
    if (email) user._email = email;
    if (birthDate) user._birthDate = birthDate;
    if (CURP) user._CURP = CURP;
    if (RFC) user._RFC = RFC;
    if (address) user._address = address;
    if (skills) user._skills = skills;
    if (role) user._role = role;

    User.findOneAndUpdate({ "_id": id }, user)
        .then(obj => res.status(200).json({
            msg: res.__("updateUser.ok"),
            obj: obj
        }))
        .catch(ex => res.status(500).json({
            msg: res.__("updateUser.fail"),
            obj: ex
        }));
}

function destroy(req, res, next) {
    const id = req.params.id;
    User.findByIdAndDelete({ "_id": id })
        .then(obj => res.status(200).json({
            msg: res.__("deleteUser.ok"),
            obj: obj
        }))
        .catch(ex => res.status(500).json({
            msg: res.__("deleteUser.fail"),
            obj: ex
        }));
}

module.exports = { create, list, index, replace, update, destroy };
